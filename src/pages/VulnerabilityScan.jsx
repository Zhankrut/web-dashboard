import React, { useState, useRef, useEffect } from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
//import { useNavigate } from "react-router-dom";

import { analyzeScanData } from "../utils/groq";
import { useScan } from "../context/ScanContext";
import { getRiskStyles, generateStyledPDF } from "../utils/scanUtils";



import scanIcon from "../assets/Images/scan.png";
import startIcon from "../assets/Images/start.png";
import stopIcon from "../assets/Images/stop.png";
import responseIcon from "../assets/Images/response.png";
import progressIcon from "../assets/Images/progress.png";

import aiIcon from "../assets/Images/ai.png";
import PluginProgressTable from "../component/PluginProgressTable";
import ResponseTimeChart from "../component/ResponseTimeChart";


function VulnerabilityScan() {
  const {
    targetUrl,
    setTargetUrl,
    scanProgress,
    alerts,
    sentMessages,
    scanStatus,
    loading,
    startScan,
    stopScan,
  } = useScan();


  const pollingRef = useRef(true);
  //const navigate = useNavigate();
  const [showProgress, setShowProgress] = useState(false);
  const [showResponse, setShowResponse] = useState(false);

  const [showAIReport, setShowAIReport] = useState(false);
  const [aiReport, setAIReport] = useState("");


  const getRiskCounts = () => {
    const counts = {
      Critical: 0,
      High: 0,
      Medium: 0,
      Low: 0,
      Informational: 0,
    };

    alerts.forEach((alert) => {
      if (Object.prototype.hasOwnProperty.call(counts, alert.risk)) {
        counts[alert.risk]++;
      }
    });

    return counts;
  };

  // Generate AI Report from filtered alerts
  const generateAIReport = async () => {
    toast("Analyzing vulnerabilities by priority...", {
      type: "info",
      autoClose: 2000,
    });

    const severityOrder = [
      "Critical",
      "High",
      "Medium",
      "Low",
      "Informational",
    ];

    const groupedAlerts = severityOrder.reduce((acc, severity) => {
      acc[severity] = alerts.filter((alert) => alert.risk === severity);
      return acc;
    }, {});

    const limitedAlerts = [
      ...groupedAlerts["Critical"],
      ...groupedAlerts["High"],
      ...groupedAlerts["Medium"].slice(0, 5),
      ...groupedAlerts["Low"].slice(0, 5),
      ...groupedAlerts["Informational"].slice(0, 1),
    ];

    const sortedAlerts = limitedAlerts.map(
      ({ alert, risk, description, solution, url }) => ({
        alert: alert?.slice(0, 100) || "Unknown alert",
        risk,
        description:
          description?.slice(0, 400).trim() || "No description provided.",
        solution: solution?.slice(0, 400).trim() || "No solution provided.",
        url,
      })
    );

    const prompt = `Analyze these web security vulnerabilities. For each, give the following fields. Start each line with an emoji and a colon, like this:

‚ö†Ô∏è Risk: <severity>
üîî Vulnerability: <vulnerability title>
üìù Description: <short summary>
üö® Impact: <security risks>
üîß Solution: <recommended fix>
üåê URL: <affected URLs>

‚û°Ô∏è Example:
‚ö†Ô∏è Risk: High
üîî Vulnerability: SQL Injection
üìù Description: Unsanitized input allows database manipulation.
üö® Impact: Unauthorized data access and corruption.
üîß Solution: Use parameterized queries and input validation.
üåê URL: https://example.com/login

‚û°Ô∏è Please give only the fields listed above. No headings, no bullet points, no markdown. Just follow this emoji format for each vulnerability.`;

    try {
      const report = await analyzeScanData(sortedAlerts, prompt, 1500);

      // üîç Clean up unwanted heading
      const cleanedReport = report
        .replace(/^#+\s*Vulnerability Analysis\s*/i, "")
        .trim();

      setAIReport(cleanedReport);
    } catch (error) {
      toast("Failed to analyze scan with AI.", { type: "error" });
      console.error("AI Analysis Error:", error);
    }
  };

  useEffect(() => {
    return () => {
      pollingRef.current = false;
    };
  }, []);

  return (
    <div className="flex flex-col gap-6 max-w-6xl mx-auto mt-10">
      {/* Scan Section */}
      <div
        className="mt-6 border border-gray-200 shadow-xl rounded-xl p-4"
        style={{
          background:
            "linear-gradient(to bottom, #d6f8df 0%, #ffd6e8 40%, #d6f8df 100%)",
          color: "#3e67c8",
        }}
      >
        <h2 className="text-2xl font-bold mb-4">ZAP Vulnerability Scanner</h2>

        <div className="flex items-center gap-4">
          <div className="relative flex-grow">
            <div className="relative w-full">
              <div
                className="absolute top-0 left-0 h-full bg-[#3e67c8] rounded"
                style={{
                  width: `${scanProgress}%`,
                  transition: "width 0.3s ease",
                  zIndex: 0,
                }}
              />

              <input
                type="text"
                className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400 relative"
                placeholder="Enter target URL (e.g. https://example.com)"
                value={targetUrl}
                onChange={(e) => setTargetUrl(e.target.value)}
                disabled={loading}
                style={{
                  backgroundColor: "transparent",
                  color: scanProgress > 30 ? "white" : "green",
                  position: "relative",
                  zIndex: 1,
                }}
              />

              {loading && (
                <div
                  className="absolute top-1/2 transform -translate-y-1/2 bg-yellow-400 text-black text-xs font-bold rounded-full px-3 py-1"
                  style={{
                    left: `calc(${Math.min(
                      Math.max(scanProgress, 25),
                      95
                    )}% - 30px)`,
                    transition: "left 0.3s ease",
                    zIndex: 2,
                  }}
                >
                  {scanProgress}%
                </div>
              )}
            </div>
          </div>

          <button
            onClick={startScan}
            disabled={loading || !targetUrl}
            className={`flex items-center justify-center hover:scale-110 transition ${loading ? "animate-pulse" : ""
              }`}
          >
            <img
              src={loading ? scanIcon : startIcon}
              alt="Scan"
              className="w-16 h-16"
            />
          </button>
        </div>

        <div className="flex items-center gap-4 text-gray-700 mt-2">
          <div>{scanStatus}</div>

          {/* Progress & Response Icons */}
          <div className="flex items-center gap-6">
            <img
              src={progressIcon}
              alt="Progress"
              className="w-8 h-8 hover:scale-110 transition-transform cursor-pointer"
              title="Scan Progress"
              onClick={() => {
                setShowProgress(true);

                setShowResponse(false);
                setShowAIReport(false); // Close AI report if open
              }}
            />
            <img
              src={responseIcon}
              alt="Response"
              className="w-8 h-8 hover:scale-110 transition-transform cursor-pointer"
              title="Response Chart"
              onClick={() => {
                setShowResponse(true);

                setShowProgress(false);
                setShowAIReport(false); // Close AI report if open
              }}
            />
            <img
              src={aiIcon}
              alt="AI"
              className="w-8 h-8 hover:scale-110 transition-transform cursor-pointer"
              title="AI Security Analysis"
              onClick={() => {
                setShowAIReport(true);
                setShowProgress(false);
                setShowResponse(false); // Close other windows if open
              }}
            />
          </div>

          {showProgress && (
  <div className="fixed top-24 right-[400px] w-[700px] h-[500px] bg-white rounded-xl shadow-xl p-4 z-50 overflow-y-auto">
    <div className="flex justify-between items-center mb-2">
      <h3 className="text-lg font-bold text-gray-700">Scan Plugin Progress</h3>
      <button
        className="text-xl text-red-500 hover:text-red-700 hover:scale-125 transition-transform"
        onClick={() => setShowProgress(false)}
      >
        √ó
      </button>
    </div>

    <PluginProgressTable />
  </div>
)}


        {showResponse && (
  <div className="fixed top-24 right-[400px] w-[700px] bg-white rounded-xl shadow-xl p-4 z-50">
    <div className="flex justify-between items-center mb-2">
      <h3 className="text-lg font-bold text-gray-700">Response Time Chart</h3>
      <button
        className="text-xl text-red-500 hover:text-red-700 hover:scale-125 transition-transform"
        onClick={() => setShowResponse(false)}
      >
        √ó
      </button>
    </div>

    <ResponseTimeChart />
  </div>
)}


          {showAIReport && (
            <div
              className="fixed top-24 right-[400px] w-[750px] h-[550px] flex flex-col justify-between border border-gray-200 z-50 shadow-lg rounded-2xl"
              style={{
                background:
                  "linear-gradient( #fce7f3 0%, #e0f2fe 50%, #e0f2fe 100%)",
                color: "#3e67c8",
              }}
            >
              {/* Header - Fixed */}
              <div className="p-4 bg-opacity-80 sticky top-0 z-10">
                <div className="flex justify-between items-center mb-3">
                  <h2 className="text-2xl font-bold">AI Security Analysis</h2>
                  <button
                    className="text-2xl text-red-500 hover:text-red-700 hover:scale-125 transition-transform"
                    onClick={() => setShowAIReport(false)}
                  >
                    √ó
                  </button>
                </div>

                <div className="flex gap-4">
                  <button
                    className="px-5 py-2 rounded bg-blue-600 hover:bg-blue-700 text-white shadow"
                    onClick={() => generateAIReport()}
                  >
                    Report
                  </button>
                  <button
                    className="px-5 py-2 rounded bg-green-600 hover:bg-green-700 text-white shadow"
                    onClick={() =>
                      toast(
                        "Analysis button clicked. (Add future AI analysis here)",
                        {
                          type: "info",
                          autoClose: 2000,
                        }
                      )
                    }
                  >
                    Analysis
                  </button>
                </div>
              </div>

              {/* Vulnerability List - Scrollable */}
              {/* Vulnerability List - Scrollable */}
              <div className="flex-1 overflow-y-auto p-4 space-y-6 text-sm leading-relaxed">
                {/* // <div className="flex-1 overflow-y-auto scrollbar scrollbar-thin scrollbar-thumb-[#3e67c8] scrollbar-track-transparent p-4 space-y-6 text-sm leading-relaxed"> */}

                {(() => {
                  const groups = [];
                  let currentGroup = [];

                  aiReport.split("\n").forEach((line) => {
                    const trimmed = line.trim();
                    if (trimmed === "") return;
                    if (
                      trimmed.startsWith("‚ö†Ô∏è Risk:") &&
                      currentGroup.length > 0
                    ) {
                      groups.push([...currentGroup]);
                      currentGroup = [];
                    }
                    currentGroup.push(trimmed);
                  });
                  if (currentGroup.length > 0) groups.push([...currentGroup]);

                  return groups.map((group, groupIndex) => {
                    const riskLine =
                      group.find((l) => l.startsWith("‚ö†Ô∏è Risk:")) || "";
                    const risk = riskLine.replace("‚ö†Ô∏è Risk:", "").trim();
                    let borderColor = "border-blue-500";
                    if (risk === "Critical") borderColor = "border-red-600";
                    else if (risk === "High") borderColor = "border-orange-500";
                    else if (risk === "Medium")
                      borderColor = "border-yellow-500";
                    else if (risk === "Low") borderColor = "border-green-500";
                    else if (risk === "Informational")
                      borderColor = "border-gray-500";

                    return (
                      <div
                        key={groupIndex}
                        className={`bg-white rounded-lg shadow-md p-4 border-l-8 ${borderColor} space-y-1`}
                      >
                        {group.map((line, index) => (
                          <p key={index}>{line}</p>
                        ))}
                      </div>
                    );
                  });
                })()}
              </div>
            </div>
          )}
        </div>
      </div>

      {loading && scanProgress < 100 && (
        <div className="flex justify-center">
          <button onClick={stopScan} className="mt-2">
            <img
              src={stopIcon}
              alt="Stop Scan"
              className="w-32 h-32 transition-transform duration-300 ease-in-out transform hover:scale-110 hover:brightness-110"
            />
          </button>
        </div>
      )}

      {/* Risk Summary */}
      {alerts.length > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
          {Object.entries(getRiskCounts()).map(([risk, count]) => (
            <div
              key={risk}
              className="flex flex-col p-4 rounded-xl text-#3e67c8 text-center transition duration-300 hover:scale-105"
              style={getRiskStyles(risk)}
            >
              <div className="font-bold">{risk}</div>
              <div className="text-3xl">{count}</div>
            </div>
          ))}
        </div>
      )}

      {/* Detected Vulnerabilities */}
      {alerts.length > 0 && (
        <div
          className="mt-6 border border-gray-200 shadow-xl rounded-xl p-4"
          style={{
            background:
              "linear-gradient(to bottom, #d6f8df 0%, #ffd6e8 40%, #d6f8df 100%)",
            color: "#3e67c8",
            height: "300px",
            display: "flex",
            flexDirection: "column",
          }}
        >
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-xl font-bold">Detected Vulnerabilities</h3>

            <div className="flex gap-4">
              <button
                onClick={() => generateStyledPDF(alerts)}
                className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm"
              >
                Download PDF
              </button>{" "}
              {/* ‚úÖ Properly closed the button */}
              <button
                onClick={() => {
                  setShowAIReport(true);
                  generateAIReport();
                }}
                className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm"
              >
                AI Report
              </button>
            </div>
          </div>

          <div className="overflow-y-auto">
            <ul className="space-y-2">
              {alerts.map((alert, idx) => (
                <li key={idx} className="p-3 bg-white rounded-2xl shadow-sm">
                  <div className="font-semibold">{alert.alert}</div>
                  <div className="text-sm text-red-600">Risk: {alert.risk}</div>
                  <div className="text-sm text-gray-600">URL: {alert.url}</div>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}

      {/* Sent HTTP Messages */}
      {!loading && sentMessages.length > 0 && (
        <div
          className="mt-6 border border-gray-200 shadow-xl rounded-xl p-4"
          style={{
            background: "linear-gradient(to bottom, #fdfdfd 0%, #e0f7fa 100%)",
            color: "#3e67c8",
            height: "350px",
            display: "flex",
            flexDirection: "column",
          }}
        >
          <h3 className="text-xl font-bold mb-2">Sent HTTP Messages</h3>
          <div className="overflow-auto">
            <table className="min-w-full text-xs text-gray-700 border-collapse">
              <thead>
                <tr className="bg-gray-200">
                  <th className="p-2 border">ID</th>
                  <th className="p-2 border">Req. Timestamp</th>
                  <th className="p-2 border">Resp. Timestamp</th>
                  <th className="p-2 border">Method</th>
                  <th className="p-2 border">URL</th>
                  <th className="p-2 border">Code</th>
                  <th className="p-2 border">Reason</th>
                  <th className="p-2 border">RTT</th>
                  <th className="p-2 border">Resp. Header</th>
                  <th className="p-2 border">Resp. Body</th>
                </tr>
              </thead>
              <tbody>
                {sentMessages.map((msg, idx) => (
                  <tr key={idx} className="hover:bg-gray-100">
                    <td className="p-2 border">{msg.id}</td>
                    <td className="p-2 border">{msg.timeSent || "-"}</td>
                    <td className="p-2 border">{msg.timeReceived || "-"}</td>
                    <td className="p-2 border">{msg.method || "-"}</td>
                    <td className="p-2 border truncate max-w-xs">
                      {msg.url || "-"}
                    </td>
                    <td className="p-2 border">{msg.statusCode || "-"}</td>
                    <td className="p-2 border">{msg.reasonPhrase || "-"}</td>
                    <td className="p-2 border">{msg.rtt || "-"}</td>
                    <td className="p-2 border">
                      {msg.responseHeader?.length || 0} bytes
                    </td>
                    <td className="p-2 border">
                      {msg.responseBody?.length || 0} bytes
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      <ToastContainer />
    </div>
  );
}

export default VulnerabilityScan;